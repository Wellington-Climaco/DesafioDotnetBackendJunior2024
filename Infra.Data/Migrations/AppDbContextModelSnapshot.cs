// <auto-generated />
using Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("TesteBackendEnContact.Core.Domain.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContactBookId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("ContactBookId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("TesteBackendEnContact.Core.Domain.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INT")
                        .HasColumnName("CompanyId");

                    b.Property<int>("ContactBookId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("ContactBookId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("TesteBackendEnContact.Core.Domain.ContactBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("ContactBook");
                });

            modelBuilder.Entity("TesteBackendEnContact.Core.Domain.Company", b =>
                {
                    b.HasOne("TesteBackendEnContact.Core.Domain.ContactBook", "ContactBook")
                        .WithMany("Company")
                        .HasForeignKey("ContactBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactBook");
                });

            modelBuilder.Entity("TesteBackendEnContact.Core.Domain.Contact", b =>
                {
                    b.HasOne("TesteBackendEnContact.Core.Domain.ContactBook", "ContactBook")
                        .WithMany("Contact")
                        .HasForeignKey("ContactBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactBook");
                });

            modelBuilder.Entity("TesteBackendEnContact.Core.Domain.ContactBook", b =>
                {
                    b.Navigation("Company");

                    b.Navigation("Contact");
                });
#pragma warning restore 612, 618
        }
    }
}
